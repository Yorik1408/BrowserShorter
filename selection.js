// selection.js ‚Äî –≤—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –≤ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏
(function () {
  if (window.__screenshot_injected) return;
  window.__screenshot_injected = true;

  let overlay = null;
  let box = null;
  let startX = 0, startY = 0;

  chrome.runtime.onMessage.addListener((msg) => {
    if (msg.action === "start-area-selection") {
      startSelection();
    }
    if (msg.action === "crop-image" && msg.dataUrl && msg.rect) {
      cropImageAndSend(msg.dataUrl, msg.rect);
    }
  });

  function startSelection() {
    if (overlay) return;

    overlay = document.createElement("div");
    overlay.id = "screenshot-overlay";
    overlay.style.position = "fixed";
    overlay.style.top = "0";
    overlay.style.left = "0";
    overlay.style.width = "100vw";
    overlay.style.height = "100vh";
    overlay.style.background = "rgba(0,0,0,0.45)";
    overlay.style.zIndex = "2147483647";
    overlay.style.cursor = "crosshair";
    document.documentElement.appendChild(overlay);

    function onDown(e) {
      if (e.button !== 0) return;
      startX = e.clientX;
      startY = e.clientY;

      box = document.createElement("div");
      box.id = "screenshot-selection";
      box.style.position = "absolute";
      box.style.left = `${startX}px`;
      box.style.top = `${startY}px`;
      box.style.width = "0px";
      box.style.height = "0px";
      box.style.border = "2px solid #4AD865";
      box.style.background = "rgba(74,216,101,0.2)";
      overlay.appendChild(box);

      overlay.addEventListener("mousemove", onMove);
      overlay.addEventListener("mouseup", onUp);
    }

    function onMove(e) {
      const x = Math.min(e.clientX, startX);
      const y = Math.min(e.clientY, startY);
      const w = Math.abs(e.clientX - startX);
      const h = Math.abs(e.clientY - startY);
      box.style.left = `${x}px`;
      box.style.top = `${y}px`;
      box.style.width = `${w}px`;
      box.style.height = `${h}px`;
    }

    function onUp(e) {
      overlay.removeEventListener("mousemove", onMove);
      overlay.removeEventListener("mouseup", onUp);
      overlay.removeEventListener("mousedown", onDown);

      const rect = box.getBoundingClientRect();

      // –ü–ª–∞–≤–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º –∑–µ–ª—ë–Ω—É—é —Ä–∞–º–∫—É –ø–µ—Ä–µ–¥ –∑–∞—Ö–≤–∞—Ç–æ–º
      if (box) {
        box.style.transition = "opacity 0.15s ease-out";
        box.style.opacity = "0";
      }
      if (overlay) {
        overlay.style.transition = "opacity 0.15s ease-out";
        overlay.style.opacity = "0";
      }

      // –∂–¥—ë–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã —Ñ–æ–Ω –∏—Å—á–µ–∑ —Å —ç–∫—Ä–∞–Ω–∞
      setTimeout(() => {
        if (box && box.parentNode) box.parentNode.removeChild(box);
        if (overlay && overlay.parentNode) overlay.parentNode.removeChild(overlay);
        box = null;
        overlay = null;

        // –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –≤ device pixels (captureVisibleTab –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç device pixels)
        const scale = window.devicePixelRatio || 1;
        const scaledRect = {
          x: Math.round(rect.left * scale),
          y: Math.round(rect.top * scale),
          width: Math.round(rect.width * scale),
          height: Math.round(rect.height * scale)
        };

        // —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã ‚Äî –æ–≤–µ—Ä–ª–µ–π —É–∂–µ –∏—Å—á–µ–∑
        chrome.runtime.sendMessage({ action: "area-selected", rect: scaledRect });
      }, 160); // 160 –º—Å ‚Äî –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ, —á—Ç–æ–±—ã —Ñ–æ–Ω —Ç–æ—á–Ω–æ –∏—Å—á–µ–∑
    }


    overlay.addEventListener("mousedown", onDown);

    // –æ—Ç–º–µ–Ω–∞ –ø–æ Escape
    function onKey(e) {
      if (e.key === "Escape") {
        if (box) box.remove();
        if (overlay) overlay.remove();
        box = null;
        overlay = null;
      }
      document.removeEventListener("keydown", onKey);
    }
    document.addEventListener("keydown", onKey);
  }

  // –ü–æ–ª—É—á–∞–µ–º dataUrl –æ—Ç background –∏ –¥–µ–ª–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∫—Ä–æ–ø –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  function cropImageAndSend(dataUrl, rect) {
    const img = new Image();
    img.onload = () => {
      try {
        const canvas = document.createElement("canvas");
        canvas.width = rect.width;
        canvas.height = rect.height;
        const ctx = canvas.getContext("2d");
        // dataUrl —É–∂–µ –≤ device pixels ‚Äî –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º rect –∫–∞–∫ –µ—Å—Ç—å
        ctx.drawImage(img, rect.x, rect.y, rect.width, rect.height, 0, 0, rect.width, rect.height);
        const croppedUrl = canvas.toDataURL("image/png");
        // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–µ–∑–∞–Ω–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ background (–æ–Ω –æ—Ç–∫—Ä–æ–µ—Ç —Ä–µ–¥–∞–∫—Ç–æ—Ä)
        chrome.runtime.sendMessage({ action: "save-cropped-screenshot", url: croppedUrl });
      } catch (err) {
        console.error("cropImageAndSend error:", err);
      }
    };
    img.onerror = (e) => {
      console.error("Failed to load image for cropping", e);
    };
    img.src = dataUrl;
  }

  // === –ì–û–†–Ø–ß–ò–ï –ö–õ–ê–í–ò–®–ò (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç) ===
  document.addEventListener('keydown', (e) => {
    // Alt + Shift + S ‚Üí —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–±–ª–∞—Å—Ç–∏
    if (e.altKey && e.shiftKey && e.code === 'KeyS') {
      e.preventDefault();
      console.log('üî• Hotkey: Screenshot Area');
      chrome.runtime.sendMessage({ action: 'start-area-selection' });
    }

    // Alt + Shift + A ‚Üí —Å–∫—Ä–∏–Ω—à–æ—Ç –≤–∫–ª–∞–¥–∫–∏
    if (e.altKey && e.shiftKey && e.code === 'KeyA') {
      e.preventDefault();
      console.log('üî• Hotkey: Screenshot Tab');
      chrome.runtime.sendMessage({ action: 'take-screenshot-tab' });
    }

    // Alt + Shift + E ‚Üí –Ω–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å
    if (e.altKey && e.shiftKey && e.code === 'KeyE') {
      e.preventDefault();
      console.log('üî• Hotkey: Start Recording');
      chrome.runtime.sendMessage({ action: 'start-recording' });
    }

    // Alt + Shift + Q ‚Üí –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å
    if (e.altKey && e.shiftKey && e.code === 'KeyQ') {
      e.preventDefault();
      console.log('üî• Hotkey: Stop Recording');
      chrome.runtime.sendMessage({ action: 'stop-recording' });
    }
  });
})();
